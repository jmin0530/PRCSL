/workspace/ACCV_2024/PRCSL/src/main_split.py:283: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  train_class_split_size = trn_frequencies[i] // current_num_client
/workspace/ACCV_2024/PRCSL/src/main_split.py:284: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  val_class_split_size = val_frequencies[i] // current_num_client
/workspace/ACCV_2024/PRCSL/src/main_split.py:285: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  test_class_split_size = test_frequencies[i] // current_num_client
/workspace/ACCV_2024/PRCSL/src/approach/der_split_dp.py:104: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  class_data = list(torch.split(torch.tensor(class_data).detach(), self.dp_mean_batch))
/workspace/ACCV_2024/PRCSL/src/approach/der_split_dp.py:297: UserWarning: Using a target size (torch.Size([20, 110])) that is different to the input size (torch.Size([20, 120])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  loss = self.alpha * F.mse_loss(torch.cat(outputs, dim=1), targets)
Traceback (most recent call last):
  File "/workspace/ACCV_2024/PRCSL/src/main_split.py", line 391, in <module>
    main()
  File "/workspace/ACCV_2024/PRCSL/src/main_split.py", line 342, in main
    appr.train(t, client_loaders, taskcla)
  File "/workspace/ACCV_2024/PRCSL/src/approach/incremental_learning_split.py", line 63, in train
    self.train_loop(t, client_loaders, client_models)
  File "/workspace/ACCV_2024/PRCSL/src/approach/der_split_dp.py", line 79, in train_loop
    super().train_loop(t, client_loaders, client_models)
  File "/workspace/ACCV_2024/PRCSL/src/approach/incremental_learning_split_der.py", line 54, in train_loop
    completed_client = self.train_epoch(t, client_loaders, client_models, lr)
  File "/workspace/ACCV_2024/PRCSL/src/approach/der_split_dp.py", line 209, in train_epoch
    loss = self.criterion(t, outputs, logits.to(self.device), now_exem)
  File "/workspace/ACCV_2024/PRCSL/src/approach/der_split_dp.py", line 297, in criterion
    loss = self.alpha * F.mse_loss(torch.cat(outputs, dim=1), targets)
  File "/opt/conda/envs/prcsl/lib/python3.8/site-packages/torch/nn/functional.py", line 3279, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/opt/conda/envs/prcsl/lib/python3.8/site-packages/torch/functional.py", line 73, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (120) must match the size of tensor b (110) at non-singleton dimension 1
